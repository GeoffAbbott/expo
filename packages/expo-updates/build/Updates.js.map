{"version":3,"file":"Updates.js","sourceRoot":"","sources":["../src/Updates.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AAGvD,OAAO,eAAe,MAAM,eAAe,CAAC;AAC5C,OAAO,kBAAkB,MAAM,mBAAmB,CAAC;AAUnD,cAAc,iBAAiB,CAAC;AAEhC,mGAAmG;AACnG,oGAAoG;AACpG,oGAAoG;AACpG,6DAA6D;AAC7D,oGAAoG;AACpG,MAAM,WAAW,GAAG,kBAAkB,IAAI,eAAe,CAAC;AAE1D,MAAM,CAAC,MAAM,WAAW,GAAgB,WAAW,CAAC,WAAW,IAAI,EAAE,CAAC;AACtE,MAAM,CAAC,MAAM,iBAAiB,GAAY,WAAW,CAAC,iBAAiB,IAAI,KAAK,CAAC;AAEjF,IAAI,SAAS,GAAG,WAAW,CAAC,QAAQ,CAAC;AACrC,IAAI,WAAW,CAAC,cAAc,EAAE;IAC9B,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;CACpD;AACD,MAAM,CAAC,MAAM,QAAQ,GAAsB,SAAS,IAAI,EAAE,CAAC;AAE3D,MAAM,CAAC,KAAK,UAAU,WAAW;IAC/B,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;QACvB,MAAM,IAAI,mBAAmB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;KACzD;IACD,MAAM,WAAW,CAAC,MAAM,EAAE,CAAC;AAC7B,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB;IACvC,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE;QACpC,MAAM,IAAI,mBAAmB,CAAC,SAAS,EAAE,qBAAqB,CAAC,CAAC;KACjE;IAED,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,mBAAmB,EAAE,CAAC;IACvD,IAAI,MAAM,CAAC,cAAc,EAAE;QACzB,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QACpD,OAAO,MAAM,CAAC,cAAc,CAAC;KAC9B;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,gBAAgB;IACpC,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE;QACjC,MAAM,IAAI,mBAAmB,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC;KAC9D;IAED,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,gBAAgB,EAAE,CAAC;IACpD,IAAI,MAAM,CAAC,cAAc,EAAE;QACzB,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QACpD,OAAO,MAAM,CAAC,cAAc,CAAC;KAC9B;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,QAA+B;IACzD,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;QAC5B,MAAM,IAAI,mBAAmB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;KACzD;IACD,OAAO,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;AAC3C,CAAC","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport { EventSubscription } from 'fbemitter';\n\nimport BareExpoUpdates from './ExpoUpdates';\nimport ManagedExpoUpdates from './ExponentUpdates';\nimport {\n  Listener,\n  LocalAssets,\n  Manifest,\n  UpdateCheckResult,\n  UpdateEvent,\n  UpdateFetchResult,\n} from './Updates.types';\n\nexport * from './Updates.types';\n\n// If ManagedExpoUpdates is nonnull, we must either be in a managed workflow project, or an ExpoKit\n// project with this package installed (so the developer can switch to the new API). In either case,\n// ManagedExpoUpdates is the \"active\" underlying Updates module implementation, so we'll want to use\n// it. Otherwise, we can safely fall back to BareExpoUpdates.\n// TODO(eric): remove ManagedExpoUpdates once NativeModules.ExponentUpdates is fully decommissioned.\nconst ExpoUpdates = ManagedExpoUpdates ?? BareExpoUpdates;\n\nexport const localAssets: LocalAssets = ExpoUpdates.localAssets ?? {};\nexport const isEmergencyLaunch: boolean = ExpoUpdates.isEmergencyLaunch || false;\n\nlet _manifest = ExpoUpdates.manifest;\nif (ExpoUpdates.manifestString) {\n  _manifest = JSON.parse(ExpoUpdates.manifestString);\n}\nexport const manifest: Manifest | object = _manifest ?? {};\n\nexport async function reloadAsync(): Promise<void> {\n  if (!ExpoUpdates.reload) {\n    throw new UnavailabilityError('Updates', 'reloadAsync');\n  }\n  await ExpoUpdates.reload();\n}\n\nexport async function checkForUpdateAsync(): Promise<UpdateCheckResult> {\n  if (!ExpoUpdates.checkForUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n  }\n\n  const result = await ExpoUpdates.checkForUpdateAsync();\n  if (result.manifestString) {\n    result.manifest = JSON.parse(result.manifestString);\n    delete result.manifestString;\n  }\n\n  return result;\n}\n\nexport async function fetchUpdateAsync(): Promise<UpdateFetchResult> {\n  if (!ExpoUpdates.fetchUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n  }\n\n  const result = await ExpoUpdates.fetchUpdateAsync();\n  if (result.manifestString) {\n    result.manifest = JSON.parse(result.manifestString);\n    delete result.manifestString;\n  }\n\n  return result;\n}\n\nexport function addListener(listener: Listener<UpdateEvent>): EventSubscription {\n  if (!ExpoUpdates.addListener) {\n    throw new UnavailabilityError('Updates', 'addListener');\n  }\n  return ExpoUpdates.addListener(listener);\n}\n"]}